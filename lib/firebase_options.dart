// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart'
    show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart'; // Import dotenv

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    // Ensure dotenv is loaded. Best practice is to load it once in main.dart.
    // Example: await dotenv.load(fileName: ".env"); // Should be in main.dart

    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static final FirebaseOptions web = FirebaseOptions(
    apiKey:
        dotenv.env['FIREBASE_WEB_API_KEY'] ??
        'FALLBACK_WEB_API_KEY', // Load from .env
    appId:
        dotenv.env['FIREBASE_WEB_APP_ID'] ??
        'FALLBACK_WEB_APP_ID', // Load from .env
    messagingSenderId: '400321097654', // Kept directly
    projectId:
        dotenv.env['FIREBASE_WEB_PROJECT_ID'] ??
        'resqlink-mobile-app',
    authDomain:
        dotenv.env['FIREBASE_WEB_AUTH_DOMAIN'] ??
        'resqlink-mobile-app.firebaseapp.com',
    storageBucket:
        dotenv.env['FIREBASE_WEB_STORAGE_BUCKET'] ??
        'resqlink-mobile-app.firebasestorage.app',
    measurementId:
        dotenv.env['FIREBASE_WEB_MEASUREMENT_ID'] ??
        'FALLBACK_WEB_MEASUREMENT_ID',
  );

  static final FirebaseOptions android = FirebaseOptions(
    apiKey:
        dotenv.env['FIREBASE_ANDROID_API_KEY'] ??
        'FALLBACK_ANDROID_API_KEY', // Load from .env
    appId:
        dotenv.env['FIREBASE_ANDROID_APP_ID'] ??
        'FALLBACK_ANDROID_APP_ID', // Load from .env
    messagingSenderId: '400321097654', // Kept directly
    projectId:
        dotenv.env['FIREBASE_ANDROID_PROJECT_ID'] ??
        'resqlink-mobile-app',
    storageBucket:
        dotenv.env['FIREBASE_ANDROID_STORAGE_BUCKET'] ??
        'resqlink-mobile-app.firebasestorage.app',
  );

  static final FirebaseOptions ios = FirebaseOptions(
    apiKey:
        dotenv.env['FIREBASE_IOS_API_KEY'] ??
        'FALLBACK_IOS_API_KEY', // Load from .env
    appId:
        dotenv.env['FIREBASE_IOS_APP_ID'] ??
        'FALLBACK_IOS_APP_ID', // Load from .env
    messagingSenderId: '400321097654', // Kept directly
    projectId:
        dotenv.env['FIREBASE_IOS_PROJECT_ID'] ??
        'resqlink-mobile-app',
    storageBucket:
        dotenv.env['FIREBASE_IOS_STORAGE_BUCKET'] ??
        'resqlink-mobile-app.firebasestorage.app',
    iosBundleId:
        dotenv.env['FIREBASE_IOS_BUNDLE_ID'] ??
        'com.example.app',
  );
}
